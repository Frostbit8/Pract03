Grammar:

Rule 0     S' -> programa
Rule 1     programa -> lista_clases
Rule 2     lista_clases -> lista_clases clase ;
Rule 3     lista_clases -> clase ;
Rule 4     clase -> CLASS TYPEID { lista_atributos }
Rule 5     clase -> CLASS TYPEID INHERITS TYPEID { lista_atributos }
Rule 6     lista_atributos -> error ;
Rule 7     lista_atributos -> lista_atributos atributo ;
Rule 8     lista_atributos -> <empty>
Rule 9     atributo -> OBJECTID ( lista_formales ) : TYPEID { error }
Rule 10    atributo -> OBJECTID : TYPEID ASSIGN expresion  [precedence=right, level=2]
Rule 11    atributo -> OBJECTID : TYPEID
Rule 12    atributo -> OBJECTID ( lista_formales ) : TYPEID { expresion }
Rule 13    lista_formales -> error ; formal
Rule 14    lista_formales -> formal , lista_formales
Rule 15    lista_formales -> formal
Rule 16    lista_formales -> <empty>
Rule 17    formal -> OBJECTID : TYPEID
Rule 18    lista_expresiones -> expresion ; lista_expresiones
Rule 19    lista_expresiones -> expresion ;
Rule 20    expr_enumeration -> <empty>
Rule 21    expr_enumeration -> lista_argumentos
Rule 22    lista_argumentos -> lista_argumentos , expresion
Rule 23    lista_argumentos -> expresion
Rule 24    expresion -> { error ; lista_expresiones }
Rule 25    expresion -> expresion < expresion  [precedence=nonassoc, level=4]
Rule 26    expresion -> expresion LE expresion  [precedence=nonassoc, level=4]
Rule 27    expresion -> BOOL_CONST
Rule 28    expresion -> STR_CONST
Rule 29    expresion -> INT_CONST
Rule 30    expresion -> OBJECTID
Rule 31    expresion -> ( expresion )
Rule 32    expresion -> NOT expresion  [precedence=right, level=3]
Rule 33    expresion -> expresion = expresion  [precedence=nonassoc, level=4]
Rule 34    expresion -> ~ expresion  [precedence=right, level=10]
Rule 35    expresion -> expresion / expresion  [precedence=left, level=6]
Rule 36    expresion -> expresion * expresion  [precedence=left, level=6]
Rule 37    expresion -> expresion - expresion  [precedence=left, level=5]
Rule 38    expresion -> expresion + expresion  [precedence=left, level=5]
Rule 39    expresion -> ISVOID expresion  [precedence=right, level=7]
Rule 40    expresion -> NEW TYPEID
Rule 41    expresion -> CASE expresion OF lista_cases ESAC
Rule 42    expresion -> LET OBJECTID : TYPEID IN expresion  [precedence=left, level=1]
Rule 43    expresion -> LET OBJECTID : TYPEID ASSIGN expresion IN expresion  [precedence=left, level=1]
Rule 44    expresion -> LET OBJECTID : TYPEID lista_id IN expresion  [precedence=left, level=1]
Rule 45    expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion  [precedence=left, level=1]
Rule 46    expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion  [precedence=left, level=1]
Rule 47    expresion -> { lista_expresiones }
Rule 48    expresion -> WHILE expresion LOOP expresion POOL
Rule 49    expresion -> IF expresion THEN expresion ELSE expresion FI
Rule 50    expresion -> OBJECTID ( expr_enumeration )
Rule 51    expresion -> expresion . OBJECTID ( expr_enumeration )
Rule 52    expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration )
Rule 53    expresion -> OBJECTID ASSIGN expresion  [precedence=right, level=2]
Rule 54    lista_id -> lista_id , OBJECTID : error
Rule 55    lista_id -> lista_id , OBJECTID : error ASSIGN expresion  [precedence=right, level=2]
Rule 56    lista_id -> , OBJECTID : error
Rule 57    lista_id -> , OBJECTID : error ASSIGN expresion  [precedence=right, level=2]
Rule 58    lista_id -> lista_id , OBJECTID : TYPEID
Rule 59    lista_id -> lista_id , OBJECTID : TYPEID ASSIGN expresion  [precedence=right, level=2]
Rule 60    lista_id -> , OBJECTID : TYPEID
Rule 61    lista_id -> , OBJECTID : TYPEID ASSIGN expresion  [precedence=right, level=2]
Rule 62    case -> OBJECTID : TYPEID DARROW expresion ;
Rule 63    lista_cases -> lista_cases case
Rule 64    lista_cases -> case

Unused terminals:

    ERROR

Terminals, with rules where they appear:

(                    : 9 12 31 50 51 52
)                    : 9 12 31 50 51 52
*                    : 36
+                    : 38
,                    : 14 22 54 55 56 57 58 59 60 61
-                    : 37
.                    : 51 52
/                    : 35
:                    : 9 10 11 12 17 42 43 44 45 46 54 55 56 57 58 59 60 61 62
;                    : 2 3 6 7 13 18 19 24 62
<                    : 25
=                    : 33
@                    : 52
ASSIGN               : 10 43 45 46 53 55 57 59 61
BOOL_CONST           : 27
CASE                 : 41
CLASS                : 4 5
DARROW               : 62
ELSE                 : 49
ERROR                : 
ESAC                 : 41
FI                   : 49
IF                   : 49
IN                   : 42 43 44 45 46
INHERITS             : 5
INT_CONST            : 29
ISVOID               : 39
LE                   : 26
LET                  : 42 43 44 45 46
LOOP                 : 48
NEW                  : 40
NOT                  : 32
OBJECTID             : 9 10 11 12 17 30 42 43 44 45 46 50 51 52 53 54 55 56 57 58 59 60 61 62
OF                   : 41
POOL                 : 48
STR_CONST            : 28
THEN                 : 49
TYPEID               : 4 5 5 9 10 11 12 17 40 42 43 44 45 46 52 58 59 60 61 62
WHILE                : 48
error                : 6 9 13 24 45 54 55 56 57
{                    : 4 5 9 12 24 47
}                    : 4 5 9 12 24 47
~                    : 34

Nonterminals, with rules where they appear:

atributo             : 7
case                 : 63 64
clase                : 2 3
expr_enumeration     : 50 51 52
expresion            : 10 12 18 19 22 23 25 25 26 26 31 32 33 33 34 35 35 36 36 37 37 38 38 39 41 42 43 43 44 45 46 46 48 48 49 49 49 51 52 53 55 57 59 61 62
formal               : 13 14 15
lista_argumentos     : 21 22
lista_atributos      : 4 5 7
lista_cases          : 41 63
lista_clases         : 1 2
lista_expresiones    : 18 24 47
lista_formales       : 9 12 14
lista_id             : 44 45 46 54 55 58 59
programa             : 0


state 0

    (0) S' -> . programa
    (1) programa -> . lista_clases
    (2) lista_clases -> . lista_clases clase ;
    (3) lista_clases -> . clase ;
    (4) clase -> . CLASS TYPEID { lista_atributos }
    (5) clase -> . CLASS TYPEID INHERITS TYPEID { lista_atributos }
    CLASS           shift and go to state 4

    programa                       shift and go to state 1
    lista_clases                   shift and go to state 2
    clase                          shift and go to state 3

state 1

    (0) S' -> programa .


state 2

    (1) programa -> lista_clases .
    (2) lista_clases -> lista_clases . clase ;
    (4) clase -> . CLASS TYPEID { lista_atributos }
    (5) clase -> . CLASS TYPEID INHERITS TYPEID { lista_atributos }
    $end            reduce using rule 1 (programa -> lista_clases .)
    CLASS           shift and go to state 4

    clase                          shift and go to state 5

state 3

    (3) lista_clases -> clase . ;
    ;               shift and go to state 6


state 4

    (4) clase -> CLASS . TYPEID { lista_atributos }
    (5) clase -> CLASS . TYPEID INHERITS TYPEID { lista_atributos }
    TYPEID          shift and go to state 7


state 5

    (2) lista_clases -> lista_clases clase . ;
    ;               shift and go to state 8


state 6

    (3) lista_clases -> clase ; .
    CLASS           reduce using rule 3 (lista_clases -> clase ; .)
    $end            reduce using rule 3 (lista_clases -> clase ; .)


state 7

    (4) clase -> CLASS TYPEID . { lista_atributos }
    (5) clase -> CLASS TYPEID . INHERITS TYPEID { lista_atributos }
    {               shift and go to state 9
    INHERITS        shift and go to state 10


state 8

    (2) lista_clases -> lista_clases clase ; .
    CLASS           reduce using rule 2 (lista_clases -> lista_clases clase ; .)
    $end            reduce using rule 2 (lista_clases -> lista_clases clase ; .)


state 9

    (4) clase -> CLASS TYPEID { . lista_atributos }
    (6) lista_atributos -> . error ;
    (7) lista_atributos -> . lista_atributos atributo ;
    (8) lista_atributos -> .
    error           shift and go to state 12
    }               reduce using rule 8 (lista_atributos -> .)
    OBJECTID        reduce using rule 8 (lista_atributos -> .)

    lista_atributos                shift and go to state 11

state 10

    (5) clase -> CLASS TYPEID INHERITS . TYPEID { lista_atributos }
    TYPEID          shift and go to state 13


state 11

    (4) clase -> CLASS TYPEID { lista_atributos . }
    (7) lista_atributos -> lista_atributos . atributo ;
    (9) atributo -> . OBJECTID ( lista_formales ) : TYPEID { error }
    (10) atributo -> . OBJECTID : TYPEID ASSIGN expresion
    (11) atributo -> . OBJECTID : TYPEID
    (12) atributo -> . OBJECTID ( lista_formales ) : TYPEID { expresion }
    }               shift and go to state 14
    OBJECTID        shift and go to state 16

    atributo                       shift and go to state 15

state 12

    (6) lista_atributos -> error . ;
    ;               shift and go to state 17


state 13

    (5) clase -> CLASS TYPEID INHERITS TYPEID . { lista_atributos }
    {               shift and go to state 18


state 14

    (4) clase -> CLASS TYPEID { lista_atributos } .
    ;               reduce using rule 4 (clase -> CLASS TYPEID { lista_atributos } .)


state 15

    (7) lista_atributos -> lista_atributos atributo . ;
    ;               shift and go to state 19


state 16

    (9) atributo -> OBJECTID . ( lista_formales ) : TYPEID { error }
    (10) atributo -> OBJECTID . : TYPEID ASSIGN expresion
    (11) atributo -> OBJECTID . : TYPEID
    (12) atributo -> OBJECTID . ( lista_formales ) : TYPEID { expresion }
    (               shift and go to state 20
    :               shift and go to state 21


state 17

    (6) lista_atributos -> error ; .
    }               reduce using rule 6 (lista_atributos -> error ; .)
    OBJECTID        reduce using rule 6 (lista_atributos -> error ; .)


state 18

    (5) clase -> CLASS TYPEID INHERITS TYPEID { . lista_atributos }
    (6) lista_atributos -> . error ;
    (7) lista_atributos -> . lista_atributos atributo ;
    (8) lista_atributos -> .
    error           shift and go to state 12
    }               reduce using rule 8 (lista_atributos -> .)
    OBJECTID        reduce using rule 8 (lista_atributos -> .)

    lista_atributos                shift and go to state 22

state 19

    (7) lista_atributos -> lista_atributos atributo ; .
    }               reduce using rule 7 (lista_atributos -> lista_atributos atributo ; .)
    OBJECTID        reduce using rule 7 (lista_atributos -> lista_atributos atributo ; .)


state 20

    (9) atributo -> OBJECTID ( . lista_formales ) : TYPEID { error }
    (12) atributo -> OBJECTID ( . lista_formales ) : TYPEID { expresion }
    (13) lista_formales -> . error ; formal
    (14) lista_formales -> . formal , lista_formales
    (15) lista_formales -> . formal
    (16) lista_formales -> .
    (17) formal -> . OBJECTID : TYPEID
    error           shift and go to state 25
    )               reduce using rule 16 (lista_formales -> .)
    OBJECTID        shift and go to state 23

    lista_formales                 shift and go to state 24
    formal                         shift and go to state 26

state 21

    (10) atributo -> OBJECTID : . TYPEID ASSIGN expresion
    (11) atributo -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 27


state 22

    (5) clase -> CLASS TYPEID INHERITS TYPEID { lista_atributos . }
    (7) lista_atributos -> lista_atributos . atributo ;
    (9) atributo -> . OBJECTID ( lista_formales ) : TYPEID { error }
    (10) atributo -> . OBJECTID : TYPEID ASSIGN expresion
    (11) atributo -> . OBJECTID : TYPEID
    (12) atributo -> . OBJECTID ( lista_formales ) : TYPEID { expresion }
    }               shift and go to state 28
    OBJECTID        shift and go to state 16

    atributo                       shift and go to state 15

state 23

    (17) formal -> OBJECTID . : TYPEID
    :               shift and go to state 29


state 24

    (9) atributo -> OBJECTID ( lista_formales . ) : TYPEID { error }
    (12) atributo -> OBJECTID ( lista_formales . ) : TYPEID { expresion }
    )               shift and go to state 30


state 25

    (13) lista_formales -> error . ; formal
    ;               shift and go to state 31


state 26

    (14) lista_formales -> formal . , lista_formales
    (15) lista_formales -> formal .
    ,               shift and go to state 32
    )               reduce using rule 15 (lista_formales -> formal .)


state 27

    (10) atributo -> OBJECTID : TYPEID . ASSIGN expresion
    (11) atributo -> OBJECTID : TYPEID .
    ASSIGN          shift and go to state 33
    ;               reduce using rule 11 (atributo -> OBJECTID : TYPEID .)


state 28

    (5) clase -> CLASS TYPEID INHERITS TYPEID { lista_atributos } .
    ;               reduce using rule 5 (clase -> CLASS TYPEID INHERITS TYPEID { lista_atributos } .)


state 29

    (17) formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 34


state 30

    (9) atributo -> OBJECTID ( lista_formales ) . : TYPEID { error }
    (12) atributo -> OBJECTID ( lista_formales ) . : TYPEID { expresion }
    :               shift and go to state 35


state 31

    (13) lista_formales -> error ; . formal
    (17) formal -> . OBJECTID : TYPEID
    OBJECTID        shift and go to state 23

    formal                         shift and go to state 36

state 32

    (14) lista_formales -> formal , . lista_formales
    (13) lista_formales -> . error ; formal
    (14) lista_formales -> . formal , lista_formales
    (15) lista_formales -> . formal
    (16) lista_formales -> .
    (17) formal -> . OBJECTID : TYPEID
    error           shift and go to state 25
    )               reduce using rule 16 (lista_formales -> .)
    OBJECTID        shift and go to state 23

    formal                         shift and go to state 26
    lista_formales                 shift and go to state 37

state 33

    (10) atributo -> OBJECTID : TYPEID ASSIGN . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 39

state 34

    (17) formal -> OBJECTID : TYPEID .
    ,               reduce using rule 17 (formal -> OBJECTID : TYPEID .)
    )               reduce using rule 17 (formal -> OBJECTID : TYPEID .)


state 35

    (9) atributo -> OBJECTID ( lista_formales ) : . TYPEID { error }
    (12) atributo -> OBJECTID ( lista_formales ) : . TYPEID { expresion }
    TYPEID          shift and go to state 53


state 36

    (13) lista_formales -> error ; formal .
    )               reduce using rule 13 (lista_formales -> error ; formal .)


state 37

    (14) lista_formales -> formal , lista_formales .
    )               reduce using rule 14 (lista_formales -> formal , lista_formales .)


state 38

    (30) expresion -> OBJECTID .
    (50) expresion -> OBJECTID . ( expr_enumeration )
    (53) expresion -> OBJECTID . ASSIGN expresion
    <               reduce using rule 30 (expresion -> OBJECTID .)
    LE              reduce using rule 30 (expresion -> OBJECTID .)
    =               reduce using rule 30 (expresion -> OBJECTID .)
    /               reduce using rule 30 (expresion -> OBJECTID .)
    *               reduce using rule 30 (expresion -> OBJECTID .)
    -               reduce using rule 30 (expresion -> OBJECTID .)
    +               reduce using rule 30 (expresion -> OBJECTID .)
    .               reduce using rule 30 (expresion -> OBJECTID .)
    @               reduce using rule 30 (expresion -> OBJECTID .)
    ;               reduce using rule 30 (expresion -> OBJECTID .)
    )               reduce using rule 30 (expresion -> OBJECTID .)
    OF              reduce using rule 30 (expresion -> OBJECTID .)
    LOOP            reduce using rule 30 (expresion -> OBJECTID .)
    THEN            reduce using rule 30 (expresion -> OBJECTID .)
    ,               reduce using rule 30 (expresion -> OBJECTID .)
    }               reduce using rule 30 (expresion -> OBJECTID .)
    POOL            reduce using rule 30 (expresion -> OBJECTID .)
    ELSE            reduce using rule 30 (expresion -> OBJECTID .)
    IN              reduce using rule 30 (expresion -> OBJECTID .)
    FI              reduce using rule 30 (expresion -> OBJECTID .)
    (               shift and go to state 54
    ASSIGN          shift and go to state 55


state 39

    (10) atributo -> OBJECTID : TYPEID ASSIGN expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    ;               reduce using rule 10 (atributo -> OBJECTID : TYPEID ASSIGN expresion .)
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 40

    (24) expresion -> { . error ; lista_expresiones }
    (47) expresion -> { . lista_expresiones }
    (18) lista_expresiones -> . expresion ; lista_expresiones
    (19) lista_expresiones -> . expresion ;
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    error           shift and go to state 65
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    lista_expresiones              shift and go to state 66
    expresion                      shift and go to state 67

state 41

    (27) expresion -> BOOL_CONST .
    <               reduce using rule 27 (expresion -> BOOL_CONST .)
    LE              reduce using rule 27 (expresion -> BOOL_CONST .)
    =               reduce using rule 27 (expresion -> BOOL_CONST .)
    /               reduce using rule 27 (expresion -> BOOL_CONST .)
    *               reduce using rule 27 (expresion -> BOOL_CONST .)
    -               reduce using rule 27 (expresion -> BOOL_CONST .)
    +               reduce using rule 27 (expresion -> BOOL_CONST .)
    .               reduce using rule 27 (expresion -> BOOL_CONST .)
    @               reduce using rule 27 (expresion -> BOOL_CONST .)
    ;               reduce using rule 27 (expresion -> BOOL_CONST .)
    )               reduce using rule 27 (expresion -> BOOL_CONST .)
    OF              reduce using rule 27 (expresion -> BOOL_CONST .)
    LOOP            reduce using rule 27 (expresion -> BOOL_CONST .)
    THEN            reduce using rule 27 (expresion -> BOOL_CONST .)
    ,               reduce using rule 27 (expresion -> BOOL_CONST .)
    }               reduce using rule 27 (expresion -> BOOL_CONST .)
    POOL            reduce using rule 27 (expresion -> BOOL_CONST .)
    ELSE            reduce using rule 27 (expresion -> BOOL_CONST .)
    IN              reduce using rule 27 (expresion -> BOOL_CONST .)
    FI              reduce using rule 27 (expresion -> BOOL_CONST .)


state 42

    (28) expresion -> STR_CONST .
    <               reduce using rule 28 (expresion -> STR_CONST .)
    LE              reduce using rule 28 (expresion -> STR_CONST .)
    =               reduce using rule 28 (expresion -> STR_CONST .)
    /               reduce using rule 28 (expresion -> STR_CONST .)
    *               reduce using rule 28 (expresion -> STR_CONST .)
    -               reduce using rule 28 (expresion -> STR_CONST .)
    +               reduce using rule 28 (expresion -> STR_CONST .)
    .               reduce using rule 28 (expresion -> STR_CONST .)
    @               reduce using rule 28 (expresion -> STR_CONST .)
    ;               reduce using rule 28 (expresion -> STR_CONST .)
    )               reduce using rule 28 (expresion -> STR_CONST .)
    OF              reduce using rule 28 (expresion -> STR_CONST .)
    LOOP            reduce using rule 28 (expresion -> STR_CONST .)
    THEN            reduce using rule 28 (expresion -> STR_CONST .)
    ,               reduce using rule 28 (expresion -> STR_CONST .)
    }               reduce using rule 28 (expresion -> STR_CONST .)
    POOL            reduce using rule 28 (expresion -> STR_CONST .)
    ELSE            reduce using rule 28 (expresion -> STR_CONST .)
    IN              reduce using rule 28 (expresion -> STR_CONST .)
    FI              reduce using rule 28 (expresion -> STR_CONST .)


state 43

    (29) expresion -> INT_CONST .
    <               reduce using rule 29 (expresion -> INT_CONST .)
    LE              reduce using rule 29 (expresion -> INT_CONST .)
    =               reduce using rule 29 (expresion -> INT_CONST .)
    /               reduce using rule 29 (expresion -> INT_CONST .)
    *               reduce using rule 29 (expresion -> INT_CONST .)
    -               reduce using rule 29 (expresion -> INT_CONST .)
    +               reduce using rule 29 (expresion -> INT_CONST .)
    .               reduce using rule 29 (expresion -> INT_CONST .)
    @               reduce using rule 29 (expresion -> INT_CONST .)
    ;               reduce using rule 29 (expresion -> INT_CONST .)
    )               reduce using rule 29 (expresion -> INT_CONST .)
    OF              reduce using rule 29 (expresion -> INT_CONST .)
    LOOP            reduce using rule 29 (expresion -> INT_CONST .)
    THEN            reduce using rule 29 (expresion -> INT_CONST .)
    ,               reduce using rule 29 (expresion -> INT_CONST .)
    }               reduce using rule 29 (expresion -> INT_CONST .)
    POOL            reduce using rule 29 (expresion -> INT_CONST .)
    ELSE            reduce using rule 29 (expresion -> INT_CONST .)
    IN              reduce using rule 29 (expresion -> INT_CONST .)
    FI              reduce using rule 29 (expresion -> INT_CONST .)


state 44

    (31) expresion -> ( . expresion )
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 68

state 45

    (32) expresion -> NOT . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 69

state 46

    (34) expresion -> ~ . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 70

state 47

    (39) expresion -> ISVOID . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 71

state 48

    (40) expresion -> NEW . TYPEID
    TYPEID          shift and go to state 72


state 49

    (41) expresion -> CASE . expresion OF lista_cases ESAC
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 73

state 50

    (42) expresion -> LET . OBJECTID : TYPEID IN expresion
    (43) expresion -> LET . OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> LET . OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> LET . OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> LET . OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    OBJECTID        shift and go to state 74


state 51

    (48) expresion -> WHILE . expresion LOOP expresion POOL
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 75

state 52

    (49) expresion -> IF . expresion THEN expresion ELSE expresion FI
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 76

state 53

    (9) atributo -> OBJECTID ( lista_formales ) : TYPEID . { error }
    (12) atributo -> OBJECTID ( lista_formales ) : TYPEID . { expresion }
    {               shift and go to state 77


state 54

    (50) expresion -> OBJECTID ( . expr_enumeration )
    (20) expr_enumeration -> .
    (21) expr_enumeration -> . lista_argumentos
    (22) lista_argumentos -> . lista_argumentos , expresion
    (23) lista_argumentos -> . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    )               reduce using rule 20 (expr_enumeration -> .)
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expr_enumeration               shift and go to state 78
    lista_argumentos               shift and go to state 79
    expresion                      shift and go to state 80

state 55

    (53) expresion -> OBJECTID ASSIGN . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 81

state 56

    (25) expresion -> expresion < . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 82

state 57

    (26) expresion -> expresion LE . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 83

state 58

    (33) expresion -> expresion = . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 84

state 59

    (35) expresion -> expresion / . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 85

state 60

    (36) expresion -> expresion * . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 86

state 61

    (37) expresion -> expresion - . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 87

state 62

    (38) expresion -> expresion + . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 88

state 63

    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    OBJECTID        shift and go to state 89


state 64

    (52) expresion -> expresion @ . TYPEID . OBJECTID ( expr_enumeration )
    TYPEID          shift and go to state 90


state 65

    (24) expresion -> { error . ; lista_expresiones }
    ;               shift and go to state 91


state 66

    (47) expresion -> { lista_expresiones . }
    }               shift and go to state 92


state 67

    (18) lista_expresiones -> expresion . ; lista_expresiones
    (19) lista_expresiones -> expresion . ;
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    ;               shift and go to state 93
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 68

    (31) expresion -> ( expresion . )
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    )               shift and go to state 94
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 69

    (32) expresion -> NOT expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    ;               reduce using rule 32 (expresion -> NOT expresion .)
    )               reduce using rule 32 (expresion -> NOT expresion .)
    OF              reduce using rule 32 (expresion -> NOT expresion .)
    LOOP            reduce using rule 32 (expresion -> NOT expresion .)
    THEN            reduce using rule 32 (expresion -> NOT expresion .)
    ,               reduce using rule 32 (expresion -> NOT expresion .)
    }               reduce using rule 32 (expresion -> NOT expresion .)
    POOL            reduce using rule 32 (expresion -> NOT expresion .)
    ELSE            reduce using rule 32 (expresion -> NOT expresion .)
    IN              reduce using rule 32 (expresion -> NOT expresion .)
    FI              reduce using rule 32 (expresion -> NOT expresion .)
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 70

    (34) expresion -> ~ expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    <               reduce using rule 34 (expresion -> ~ expresion .)
    LE              reduce using rule 34 (expresion -> ~ expresion .)
    =               reduce using rule 34 (expresion -> ~ expresion .)
    /               reduce using rule 34 (expresion -> ~ expresion .)
    *               reduce using rule 34 (expresion -> ~ expresion .)
    -               reduce using rule 34 (expresion -> ~ expresion .)
    +               reduce using rule 34 (expresion -> ~ expresion .)
    .               reduce using rule 34 (expresion -> ~ expresion .)
    @               reduce using rule 34 (expresion -> ~ expresion .)
    ;               reduce using rule 34 (expresion -> ~ expresion .)
    )               reduce using rule 34 (expresion -> ~ expresion .)
    OF              reduce using rule 34 (expresion -> ~ expresion .)
    LOOP            reduce using rule 34 (expresion -> ~ expresion .)
    THEN            reduce using rule 34 (expresion -> ~ expresion .)
    ,               reduce using rule 34 (expresion -> ~ expresion .)
    }               reduce using rule 34 (expresion -> ~ expresion .)
    POOL            reduce using rule 34 (expresion -> ~ expresion .)
    ELSE            reduce using rule 34 (expresion -> ~ expresion .)
    IN              reduce using rule 34 (expresion -> ~ expresion .)
    FI              reduce using rule 34 (expresion -> ~ expresion .)


state 71

    (39) expresion -> ISVOID expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    <               reduce using rule 39 (expresion -> ISVOID expresion .)
    LE              reduce using rule 39 (expresion -> ISVOID expresion .)
    =               reduce using rule 39 (expresion -> ISVOID expresion .)
    /               reduce using rule 39 (expresion -> ISVOID expresion .)
    *               reduce using rule 39 (expresion -> ISVOID expresion .)
    -               reduce using rule 39 (expresion -> ISVOID expresion .)
    +               reduce using rule 39 (expresion -> ISVOID expresion .)
    ;               reduce using rule 39 (expresion -> ISVOID expresion .)
    )               reduce using rule 39 (expresion -> ISVOID expresion .)
    OF              reduce using rule 39 (expresion -> ISVOID expresion .)
    LOOP            reduce using rule 39 (expresion -> ISVOID expresion .)
    THEN            reduce using rule 39 (expresion -> ISVOID expresion .)
    ,               reduce using rule 39 (expresion -> ISVOID expresion .)
    }               reduce using rule 39 (expresion -> ISVOID expresion .)
    POOL            reduce using rule 39 (expresion -> ISVOID expresion .)
    ELSE            reduce using rule 39 (expresion -> ISVOID expresion .)
    IN              reduce using rule 39 (expresion -> ISVOID expresion .)
    FI              reduce using rule 39 (expresion -> ISVOID expresion .)
    .               shift and go to state 63
    @               shift and go to state 64


state 72

    (40) expresion -> NEW TYPEID .
    <               reduce using rule 40 (expresion -> NEW TYPEID .)
    LE              reduce using rule 40 (expresion -> NEW TYPEID .)
    =               reduce using rule 40 (expresion -> NEW TYPEID .)
    /               reduce using rule 40 (expresion -> NEW TYPEID .)
    *               reduce using rule 40 (expresion -> NEW TYPEID .)
    -               reduce using rule 40 (expresion -> NEW TYPEID .)
    +               reduce using rule 40 (expresion -> NEW TYPEID .)
    .               reduce using rule 40 (expresion -> NEW TYPEID .)
    @               reduce using rule 40 (expresion -> NEW TYPEID .)
    ;               reduce using rule 40 (expresion -> NEW TYPEID .)
    )               reduce using rule 40 (expresion -> NEW TYPEID .)
    OF              reduce using rule 40 (expresion -> NEW TYPEID .)
    LOOP            reduce using rule 40 (expresion -> NEW TYPEID .)
    THEN            reduce using rule 40 (expresion -> NEW TYPEID .)
    ,               reduce using rule 40 (expresion -> NEW TYPEID .)
    }               reduce using rule 40 (expresion -> NEW TYPEID .)
    POOL            reduce using rule 40 (expresion -> NEW TYPEID .)
    ELSE            reduce using rule 40 (expresion -> NEW TYPEID .)
    IN              reduce using rule 40 (expresion -> NEW TYPEID .)
    FI              reduce using rule 40 (expresion -> NEW TYPEID .)


state 73

    (41) expresion -> CASE expresion . OF lista_cases ESAC
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    OF              shift and go to state 95
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 74

    (42) expresion -> LET OBJECTID . : TYPEID IN expresion
    (43) expresion -> LET OBJECTID . : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> LET OBJECTID . : TYPEID lista_id IN expresion
    (45) expresion -> LET OBJECTID . : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> LET OBJECTID . : TYPEID ASSIGN expresion lista_id IN expresion
    :               shift and go to state 96


state 75

    (48) expresion -> WHILE expresion . LOOP expresion POOL
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    LOOP            shift and go to state 97
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 76

    (49) expresion -> IF expresion . THEN expresion ELSE expresion FI
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    THEN            shift and go to state 98
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 77

    (9) atributo -> OBJECTID ( lista_formales ) : TYPEID { . error }
    (12) atributo -> OBJECTID ( lista_formales ) : TYPEID { . expresion }
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    error           shift and go to state 99
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 100

state 78

    (50) expresion -> OBJECTID ( expr_enumeration . )
    )               shift and go to state 101


state 79

    (21) expr_enumeration -> lista_argumentos .
    (22) lista_argumentos -> lista_argumentos . , expresion
    )               reduce using rule 21 (expr_enumeration -> lista_argumentos .)
    ,               shift and go to state 102


state 80

    (23) lista_argumentos -> expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    ,               reduce using rule 23 (lista_argumentos -> expresion .)
    )               reduce using rule 23 (lista_argumentos -> expresion .)
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 81

    (53) expresion -> OBJECTID ASSIGN expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    ;               reduce using rule 53 (expresion -> OBJECTID ASSIGN expresion .)
    )               reduce using rule 53 (expresion -> OBJECTID ASSIGN expresion .)
    OF              reduce using rule 53 (expresion -> OBJECTID ASSIGN expresion .)
    LOOP            reduce using rule 53 (expresion -> OBJECTID ASSIGN expresion .)
    THEN            reduce using rule 53 (expresion -> OBJECTID ASSIGN expresion .)
    ,               reduce using rule 53 (expresion -> OBJECTID ASSIGN expresion .)
    }               reduce using rule 53 (expresion -> OBJECTID ASSIGN expresion .)
    POOL            reduce using rule 53 (expresion -> OBJECTID ASSIGN expresion .)
    ELSE            reduce using rule 53 (expresion -> OBJECTID ASSIGN expresion .)
    IN              reduce using rule 53 (expresion -> OBJECTID ASSIGN expresion .)
    FI              reduce using rule 53 (expresion -> OBJECTID ASSIGN expresion .)
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 82

    (25) expresion -> expresion < expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    <               reduce using rule 25 (expresion -> expresion < expresion .)
    LE              reduce using rule 25 (expresion -> expresion < expresion .)
    =               reduce using rule 25 (expresion -> expresion < expresion .)
    ;               reduce using rule 25 (expresion -> expresion < expresion .)
    )               reduce using rule 25 (expresion -> expresion < expresion .)
    OF              reduce using rule 25 (expresion -> expresion < expresion .)
    LOOP            reduce using rule 25 (expresion -> expresion < expresion .)
    THEN            reduce using rule 25 (expresion -> expresion < expresion .)
    ,               reduce using rule 25 (expresion -> expresion < expresion .)
    }               reduce using rule 25 (expresion -> expresion < expresion .)
    POOL            reduce using rule 25 (expresion -> expresion < expresion .)
    ELSE            reduce using rule 25 (expresion -> expresion < expresion .)
    IN              reduce using rule 25 (expresion -> expresion < expresion .)
    FI              reduce using rule 25 (expresion -> expresion < expresion .)
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 83

    (26) expresion -> expresion LE expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    <               reduce using rule 26 (expresion -> expresion LE expresion .)
    LE              reduce using rule 26 (expresion -> expresion LE expresion .)
    =               reduce using rule 26 (expresion -> expresion LE expresion .)
    ;               reduce using rule 26 (expresion -> expresion LE expresion .)
    )               reduce using rule 26 (expresion -> expresion LE expresion .)
    OF              reduce using rule 26 (expresion -> expresion LE expresion .)
    LOOP            reduce using rule 26 (expresion -> expresion LE expresion .)
    THEN            reduce using rule 26 (expresion -> expresion LE expresion .)
    ,               reduce using rule 26 (expresion -> expresion LE expresion .)
    }               reduce using rule 26 (expresion -> expresion LE expresion .)
    POOL            reduce using rule 26 (expresion -> expresion LE expresion .)
    ELSE            reduce using rule 26 (expresion -> expresion LE expresion .)
    IN              reduce using rule 26 (expresion -> expresion LE expresion .)
    FI              reduce using rule 26 (expresion -> expresion LE expresion .)
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 84

    (33) expresion -> expresion = expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    <               reduce using rule 33 (expresion -> expresion = expresion .)
    LE              reduce using rule 33 (expresion -> expresion = expresion .)
    =               reduce using rule 33 (expresion -> expresion = expresion .)
    ;               reduce using rule 33 (expresion -> expresion = expresion .)
    )               reduce using rule 33 (expresion -> expresion = expresion .)
    OF              reduce using rule 33 (expresion -> expresion = expresion .)
    LOOP            reduce using rule 33 (expresion -> expresion = expresion .)
    THEN            reduce using rule 33 (expresion -> expresion = expresion .)
    ,               reduce using rule 33 (expresion -> expresion = expresion .)
    }               reduce using rule 33 (expresion -> expresion = expresion .)
    POOL            reduce using rule 33 (expresion -> expresion = expresion .)
    ELSE            reduce using rule 33 (expresion -> expresion = expresion .)
    IN              reduce using rule 33 (expresion -> expresion = expresion .)
    FI              reduce using rule 33 (expresion -> expresion = expresion .)
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 85

    (35) expresion -> expresion / expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    <               reduce using rule 35 (expresion -> expresion / expresion .)
    LE              reduce using rule 35 (expresion -> expresion / expresion .)
    =               reduce using rule 35 (expresion -> expresion / expresion .)
    /               reduce using rule 35 (expresion -> expresion / expresion .)
    *               reduce using rule 35 (expresion -> expresion / expresion .)
    -               reduce using rule 35 (expresion -> expresion / expresion .)
    +               reduce using rule 35 (expresion -> expresion / expresion .)
    ;               reduce using rule 35 (expresion -> expresion / expresion .)
    )               reduce using rule 35 (expresion -> expresion / expresion .)
    OF              reduce using rule 35 (expresion -> expresion / expresion .)
    LOOP            reduce using rule 35 (expresion -> expresion / expresion .)
    THEN            reduce using rule 35 (expresion -> expresion / expresion .)
    ,               reduce using rule 35 (expresion -> expresion / expresion .)
    }               reduce using rule 35 (expresion -> expresion / expresion .)
    POOL            reduce using rule 35 (expresion -> expresion / expresion .)
    ELSE            reduce using rule 35 (expresion -> expresion / expresion .)
    IN              reduce using rule 35 (expresion -> expresion / expresion .)
    FI              reduce using rule 35 (expresion -> expresion / expresion .)
    .               shift and go to state 63
    @               shift and go to state 64


state 86

    (36) expresion -> expresion * expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    <               reduce using rule 36 (expresion -> expresion * expresion .)
    LE              reduce using rule 36 (expresion -> expresion * expresion .)
    =               reduce using rule 36 (expresion -> expresion * expresion .)
    /               reduce using rule 36 (expresion -> expresion * expresion .)
    *               reduce using rule 36 (expresion -> expresion * expresion .)
    -               reduce using rule 36 (expresion -> expresion * expresion .)
    +               reduce using rule 36 (expresion -> expresion * expresion .)
    ;               reduce using rule 36 (expresion -> expresion * expresion .)
    )               reduce using rule 36 (expresion -> expresion * expresion .)
    OF              reduce using rule 36 (expresion -> expresion * expresion .)
    LOOP            reduce using rule 36 (expresion -> expresion * expresion .)
    THEN            reduce using rule 36 (expresion -> expresion * expresion .)
    ,               reduce using rule 36 (expresion -> expresion * expresion .)
    }               reduce using rule 36 (expresion -> expresion * expresion .)
    POOL            reduce using rule 36 (expresion -> expresion * expresion .)
    ELSE            reduce using rule 36 (expresion -> expresion * expresion .)
    IN              reduce using rule 36 (expresion -> expresion * expresion .)
    FI              reduce using rule 36 (expresion -> expresion * expresion .)
    .               shift and go to state 63
    @               shift and go to state 64


state 87

    (37) expresion -> expresion - expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    <               reduce using rule 37 (expresion -> expresion - expresion .)
    LE              reduce using rule 37 (expresion -> expresion - expresion .)
    =               reduce using rule 37 (expresion -> expresion - expresion .)
    -               reduce using rule 37 (expresion -> expresion - expresion .)
    +               reduce using rule 37 (expresion -> expresion - expresion .)
    ;               reduce using rule 37 (expresion -> expresion - expresion .)
    )               reduce using rule 37 (expresion -> expresion - expresion .)
    OF              reduce using rule 37 (expresion -> expresion - expresion .)
    LOOP            reduce using rule 37 (expresion -> expresion - expresion .)
    THEN            reduce using rule 37 (expresion -> expresion - expresion .)
    ,               reduce using rule 37 (expresion -> expresion - expresion .)
    }               reduce using rule 37 (expresion -> expresion - expresion .)
    POOL            reduce using rule 37 (expresion -> expresion - expresion .)
    ELSE            reduce using rule 37 (expresion -> expresion - expresion .)
    IN              reduce using rule 37 (expresion -> expresion - expresion .)
    FI              reduce using rule 37 (expresion -> expresion - expresion .)
    /               shift and go to state 59
    *               shift and go to state 60
    .               shift and go to state 63
    @               shift and go to state 64


state 88

    (38) expresion -> expresion + expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    <               reduce using rule 38 (expresion -> expresion + expresion .)
    LE              reduce using rule 38 (expresion -> expresion + expresion .)
    =               reduce using rule 38 (expresion -> expresion + expresion .)
    -               reduce using rule 38 (expresion -> expresion + expresion .)
    +               reduce using rule 38 (expresion -> expresion + expresion .)
    ;               reduce using rule 38 (expresion -> expresion + expresion .)
    )               reduce using rule 38 (expresion -> expresion + expresion .)
    OF              reduce using rule 38 (expresion -> expresion + expresion .)
    LOOP            reduce using rule 38 (expresion -> expresion + expresion .)
    THEN            reduce using rule 38 (expresion -> expresion + expresion .)
    ,               reduce using rule 38 (expresion -> expresion + expresion .)
    }               reduce using rule 38 (expresion -> expresion + expresion .)
    POOL            reduce using rule 38 (expresion -> expresion + expresion .)
    ELSE            reduce using rule 38 (expresion -> expresion + expresion .)
    IN              reduce using rule 38 (expresion -> expresion + expresion .)
    FI              reduce using rule 38 (expresion -> expresion + expresion .)
    /               shift and go to state 59
    *               shift and go to state 60
    .               shift and go to state 63
    @               shift and go to state 64


state 89

    (51) expresion -> expresion . OBJECTID . ( expr_enumeration )
    (               shift and go to state 103


state 90

    (52) expresion -> expresion @ TYPEID . . OBJECTID ( expr_enumeration )
    .               shift and go to state 104


state 91

    (24) expresion -> { error ; . lista_expresiones }
    (18) lista_expresiones -> . expresion ; lista_expresiones
    (19) lista_expresiones -> . expresion ;
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    lista_expresiones              shift and go to state 105
    expresion                      shift and go to state 67

state 92

    (47) expresion -> { lista_expresiones } .
    <               reduce using rule 47 (expresion -> { lista_expresiones } .)
    LE              reduce using rule 47 (expresion -> { lista_expresiones } .)
    =               reduce using rule 47 (expresion -> { lista_expresiones } .)
    /               reduce using rule 47 (expresion -> { lista_expresiones } .)
    *               reduce using rule 47 (expresion -> { lista_expresiones } .)
    -               reduce using rule 47 (expresion -> { lista_expresiones } .)
    +               reduce using rule 47 (expresion -> { lista_expresiones } .)
    .               reduce using rule 47 (expresion -> { lista_expresiones } .)
    @               reduce using rule 47 (expresion -> { lista_expresiones } .)
    ;               reduce using rule 47 (expresion -> { lista_expresiones } .)
    )               reduce using rule 47 (expresion -> { lista_expresiones } .)
    OF              reduce using rule 47 (expresion -> { lista_expresiones } .)
    LOOP            reduce using rule 47 (expresion -> { lista_expresiones } .)
    THEN            reduce using rule 47 (expresion -> { lista_expresiones } .)
    ,               reduce using rule 47 (expresion -> { lista_expresiones } .)
    }               reduce using rule 47 (expresion -> { lista_expresiones } .)
    POOL            reduce using rule 47 (expresion -> { lista_expresiones } .)
    ELSE            reduce using rule 47 (expresion -> { lista_expresiones } .)
    IN              reduce using rule 47 (expresion -> { lista_expresiones } .)
    FI              reduce using rule 47 (expresion -> { lista_expresiones } .)


state 93

    (18) lista_expresiones -> expresion ; . lista_expresiones
    (19) lista_expresiones -> expresion ; .
    (18) lista_expresiones -> . expresion ; lista_expresiones
    (19) lista_expresiones -> . expresion ;
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    }               reduce using rule 19 (lista_expresiones -> expresion ; .)
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 67
    lista_expresiones              shift and go to state 106

state 94

    (31) expresion -> ( expresion ) .
    <               reduce using rule 31 (expresion -> ( expresion ) .)
    LE              reduce using rule 31 (expresion -> ( expresion ) .)
    =               reduce using rule 31 (expresion -> ( expresion ) .)
    /               reduce using rule 31 (expresion -> ( expresion ) .)
    *               reduce using rule 31 (expresion -> ( expresion ) .)
    -               reduce using rule 31 (expresion -> ( expresion ) .)
    +               reduce using rule 31 (expresion -> ( expresion ) .)
    .               reduce using rule 31 (expresion -> ( expresion ) .)
    @               reduce using rule 31 (expresion -> ( expresion ) .)
    ;               reduce using rule 31 (expresion -> ( expresion ) .)
    )               reduce using rule 31 (expresion -> ( expresion ) .)
    OF              reduce using rule 31 (expresion -> ( expresion ) .)
    LOOP            reduce using rule 31 (expresion -> ( expresion ) .)
    THEN            reduce using rule 31 (expresion -> ( expresion ) .)
    ,               reduce using rule 31 (expresion -> ( expresion ) .)
    }               reduce using rule 31 (expresion -> ( expresion ) .)
    POOL            reduce using rule 31 (expresion -> ( expresion ) .)
    ELSE            reduce using rule 31 (expresion -> ( expresion ) .)
    IN              reduce using rule 31 (expresion -> ( expresion ) .)
    FI              reduce using rule 31 (expresion -> ( expresion ) .)


state 95

    (41) expresion -> CASE expresion OF . lista_cases ESAC
    (63) lista_cases -> . lista_cases case
    (64) lista_cases -> . case
    (62) case -> . OBJECTID : TYPEID DARROW expresion ;
    OBJECTID        shift and go to state 109

    lista_cases                    shift and go to state 107
    case                           shift and go to state 108

state 96

    (42) expresion -> LET OBJECTID : . TYPEID IN expresion
    (43) expresion -> LET OBJECTID : . TYPEID ASSIGN expresion IN expresion
    (44) expresion -> LET OBJECTID : . TYPEID lista_id IN expresion
    (45) expresion -> LET OBJECTID : . TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> LET OBJECTID : . TYPEID ASSIGN expresion lista_id IN expresion
    TYPEID          shift and go to state 110


state 97

    (48) expresion -> WHILE expresion LOOP . expresion POOL
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 111

state 98

    (49) expresion -> IF expresion THEN . expresion ELSE expresion FI
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 112

state 99

    (9) atributo -> OBJECTID ( lista_formales ) : TYPEID { error . }
    }               shift and go to state 113


state 100

    (12) atributo -> OBJECTID ( lista_formales ) : TYPEID { expresion . }
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    }               shift and go to state 114
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 101

    (50) expresion -> OBJECTID ( expr_enumeration ) .
    <               reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    LE              reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    =               reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    /               reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    *               reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    -               reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    +               reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    .               reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    @               reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    ;               reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    )               reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    OF              reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    LOOP            reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    THEN            reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    ,               reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    }               reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    POOL            reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    ELSE            reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    IN              reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)
    FI              reduce using rule 50 (expresion -> OBJECTID ( expr_enumeration ) .)


state 102

    (22) lista_argumentos -> lista_argumentos , . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 115

state 103

    (51) expresion -> expresion . OBJECTID ( . expr_enumeration )
    (20) expr_enumeration -> .
    (21) expr_enumeration -> . lista_argumentos
    (22) lista_argumentos -> . lista_argumentos , expresion
    (23) lista_argumentos -> . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    )               reduce using rule 20 (expr_enumeration -> .)
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 80
    expr_enumeration               shift and go to state 116
    lista_argumentos               shift and go to state 79

state 104

    (52) expresion -> expresion @ TYPEID . . OBJECTID ( expr_enumeration )
    OBJECTID        shift and go to state 117


state 105

    (24) expresion -> { error ; lista_expresiones . }
    }               shift and go to state 118


state 106

    (18) lista_expresiones -> expresion ; lista_expresiones .
    }               reduce using rule 18 (lista_expresiones -> expresion ; lista_expresiones .)


state 107

    (41) expresion -> CASE expresion OF lista_cases . ESAC
    (63) lista_cases -> lista_cases . case
    (62) case -> . OBJECTID : TYPEID DARROW expresion ;
    ESAC            shift and go to state 119
    OBJECTID        shift and go to state 109

    case                           shift and go to state 120

state 108

    (64) lista_cases -> case .
    ESAC            reduce using rule 64 (lista_cases -> case .)
    OBJECTID        reduce using rule 64 (lista_cases -> case .)


state 109

    (62) case -> OBJECTID . : TYPEID DARROW expresion ;
    :               shift and go to state 121


state 110

    (42) expresion -> LET OBJECTID : TYPEID . IN expresion
    (43) expresion -> LET OBJECTID : TYPEID . ASSIGN expresion IN expresion
    (44) expresion -> LET OBJECTID : TYPEID . lista_id IN expresion
    (45) expresion -> LET OBJECTID : TYPEID . ASSIGN error lista_id IN expresion
    (46) expresion -> LET OBJECTID : TYPEID . ASSIGN expresion lista_id IN expresion
    (54) lista_id -> . lista_id , OBJECTID : error
    (55) lista_id -> . lista_id , OBJECTID : error ASSIGN expresion
    (56) lista_id -> . , OBJECTID : error
    (57) lista_id -> . , OBJECTID : error ASSIGN expresion
    (58) lista_id -> . lista_id , OBJECTID : TYPEID
    (59) lista_id -> . lista_id , OBJECTID : TYPEID ASSIGN expresion
    (60) lista_id -> . , OBJECTID : TYPEID
    (61) lista_id -> . , OBJECTID : TYPEID ASSIGN expresion
    IN              shift and go to state 122
    ASSIGN          shift and go to state 123
    ,               shift and go to state 125

    lista_id                       shift and go to state 124

state 111

    (48) expresion -> WHILE expresion LOOP expresion . POOL
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    POOL            shift and go to state 126
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 112

    (49) expresion -> IF expresion THEN expresion . ELSE expresion FI
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    ELSE            shift and go to state 127
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 113

    (9) atributo -> OBJECTID ( lista_formales ) : TYPEID { error } .
    ;               reduce using rule 9 (atributo -> OBJECTID ( lista_formales ) : TYPEID { error } .)


state 114

    (12) atributo -> OBJECTID ( lista_formales ) : TYPEID { expresion } .
    ;               reduce using rule 12 (atributo -> OBJECTID ( lista_formales ) : TYPEID { expresion } .)


state 115

    (22) lista_argumentos -> lista_argumentos , expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    ,               reduce using rule 22 (lista_argumentos -> lista_argumentos , expresion .)
    )               reduce using rule 22 (lista_argumentos -> lista_argumentos , expresion .)
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 116

    (51) expresion -> expresion . OBJECTID ( expr_enumeration . )
    )               shift and go to state 128


state 117

    (52) expresion -> expresion @ TYPEID . OBJECTID . ( expr_enumeration )
    (               shift and go to state 129


state 118

    (24) expresion -> { error ; lista_expresiones } .
    <               reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    LE              reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    =               reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    /               reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    *               reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    -               reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    +               reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    .               reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    @               reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    ;               reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    )               reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    OF              reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    LOOP            reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    THEN            reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    ,               reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    }               reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    POOL            reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    ELSE            reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    IN              reduce using rule 24 (expresion -> { error ; lista_expresiones } .)
    FI              reduce using rule 24 (expresion -> { error ; lista_expresiones } .)


state 119

    (41) expresion -> CASE expresion OF lista_cases ESAC .
    <               reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    LE              reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    =               reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    /               reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    *               reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    -               reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    +               reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    .               reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    @               reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    ;               reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    )               reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    OF              reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    LOOP            reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    THEN            reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    ,               reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    }               reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    POOL            reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    ELSE            reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    IN              reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)
    FI              reduce using rule 41 (expresion -> CASE expresion OF lista_cases ESAC .)


state 120

    (63) lista_cases -> lista_cases case .
    ESAC            reduce using rule 63 (lista_cases -> lista_cases case .)
    OBJECTID        reduce using rule 63 (lista_cases -> lista_cases case .)


state 121

    (62) case -> OBJECTID : . TYPEID DARROW expresion ;
    TYPEID          shift and go to state 130


state 122

    (42) expresion -> LET OBJECTID : TYPEID IN . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 131

state 123

    (43) expresion -> LET OBJECTID : TYPEID ASSIGN . expresion IN expresion
    (45) expresion -> LET OBJECTID : TYPEID ASSIGN . error lista_id IN expresion
    (46) expresion -> LET OBJECTID : TYPEID ASSIGN . expresion lista_id IN expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    error           shift and go to state 133
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 132

state 124

    (44) expresion -> LET OBJECTID : TYPEID lista_id . IN expresion
    (54) lista_id -> lista_id . , OBJECTID : error
    (55) lista_id -> lista_id . , OBJECTID : error ASSIGN expresion
    (58) lista_id -> lista_id . , OBJECTID : TYPEID
    (59) lista_id -> lista_id . , OBJECTID : TYPEID ASSIGN expresion
    IN              shift and go to state 134
    ,               shift and go to state 135


state 125

    (56) lista_id -> , . OBJECTID : error
    (57) lista_id -> , . OBJECTID : error ASSIGN expresion
    (60) lista_id -> , . OBJECTID : TYPEID
    (61) lista_id -> , . OBJECTID : TYPEID ASSIGN expresion
    OBJECTID        shift and go to state 136


state 126

    (48) expresion -> WHILE expresion LOOP expresion POOL .
    <               reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    LE              reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    =               reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    /               reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    *               reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    -               reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    +               reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    .               reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    @               reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    ;               reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    )               reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    OF              reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    LOOP            reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    THEN            reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    ,               reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    }               reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    POOL            reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    ELSE            reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    IN              reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)
    FI              reduce using rule 48 (expresion -> WHILE expresion LOOP expresion POOL .)


state 127

    (49) expresion -> IF expresion THEN expresion ELSE . expresion FI
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 137

state 128

    (51) expresion -> expresion . OBJECTID ( expr_enumeration ) .
    <               reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    LE              reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    =               reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    /               reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    *               reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    -               reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    +               reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    .               reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    @               reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    ;               reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    )               reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    OF              reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    LOOP            reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    THEN            reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    ,               reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    }               reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    POOL            reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    ELSE            reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    IN              reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)
    FI              reduce using rule 51 (expresion -> expresion . OBJECTID ( expr_enumeration ) .)


state 129

    (52) expresion -> expresion @ TYPEID . OBJECTID ( . expr_enumeration )
    (20) expr_enumeration -> .
    (21) expr_enumeration -> . lista_argumentos
    (22) lista_argumentos -> . lista_argumentos , expresion
    (23) lista_argumentos -> . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    )               reduce using rule 20 (expr_enumeration -> .)
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 80
    expr_enumeration               shift and go to state 138
    lista_argumentos               shift and go to state 79

state 130

    (62) case -> OBJECTID : TYPEID . DARROW expresion ;
    DARROW          shift and go to state 139


state 131

    (42) expresion -> LET OBJECTID : TYPEID IN expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    ;               reduce using rule 42 (expresion -> LET OBJECTID : TYPEID IN expresion .)
    )               reduce using rule 42 (expresion -> LET OBJECTID : TYPEID IN expresion .)
    OF              reduce using rule 42 (expresion -> LET OBJECTID : TYPEID IN expresion .)
    LOOP            reduce using rule 42 (expresion -> LET OBJECTID : TYPEID IN expresion .)
    THEN            reduce using rule 42 (expresion -> LET OBJECTID : TYPEID IN expresion .)
    ,               reduce using rule 42 (expresion -> LET OBJECTID : TYPEID IN expresion .)
    }               reduce using rule 42 (expresion -> LET OBJECTID : TYPEID IN expresion .)
    POOL            reduce using rule 42 (expresion -> LET OBJECTID : TYPEID IN expresion .)
    ELSE            reduce using rule 42 (expresion -> LET OBJECTID : TYPEID IN expresion .)
    IN              reduce using rule 42 (expresion -> LET OBJECTID : TYPEID IN expresion .)
    FI              reduce using rule 42 (expresion -> LET OBJECTID : TYPEID IN expresion .)
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 132

    (43) expresion -> LET OBJECTID : TYPEID ASSIGN expresion . IN expresion
    (46) expresion -> LET OBJECTID : TYPEID ASSIGN expresion . lista_id IN expresion
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    (54) lista_id -> . lista_id , OBJECTID : error
    (55) lista_id -> . lista_id , OBJECTID : error ASSIGN expresion
    (56) lista_id -> . , OBJECTID : error
    (57) lista_id -> . , OBJECTID : error ASSIGN expresion
    (58) lista_id -> . lista_id , OBJECTID : TYPEID
    (59) lista_id -> . lista_id , OBJECTID : TYPEID ASSIGN expresion
    (60) lista_id -> . , OBJECTID : TYPEID
    (61) lista_id -> . , OBJECTID : TYPEID ASSIGN expresion
    IN              shift and go to state 140
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64
    ,               shift and go to state 125

    lista_id                       shift and go to state 141

state 133

    (45) expresion -> LET OBJECTID : TYPEID ASSIGN error . lista_id IN expresion
    (54) lista_id -> . lista_id , OBJECTID : error
    (55) lista_id -> . lista_id , OBJECTID : error ASSIGN expresion
    (56) lista_id -> . , OBJECTID : error
    (57) lista_id -> . , OBJECTID : error ASSIGN expresion
    (58) lista_id -> . lista_id , OBJECTID : TYPEID
    (59) lista_id -> . lista_id , OBJECTID : TYPEID ASSIGN expresion
    (60) lista_id -> . , OBJECTID : TYPEID
    (61) lista_id -> . , OBJECTID : TYPEID ASSIGN expresion
    ,               shift and go to state 125

    lista_id                       shift and go to state 142

state 134

    (44) expresion -> LET OBJECTID : TYPEID lista_id IN . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 143

state 135

    (54) lista_id -> lista_id , . OBJECTID : error
    (55) lista_id -> lista_id , . OBJECTID : error ASSIGN expresion
    (58) lista_id -> lista_id , . OBJECTID : TYPEID
    (59) lista_id -> lista_id , . OBJECTID : TYPEID ASSIGN expresion
    OBJECTID        shift and go to state 144


state 136

    (56) lista_id -> , OBJECTID . : error
    (57) lista_id -> , OBJECTID . : error ASSIGN expresion
    (60) lista_id -> , OBJECTID . : TYPEID
    (61) lista_id -> , OBJECTID . : TYPEID ASSIGN expresion
    :               shift and go to state 145


state 137

    (49) expresion -> IF expresion THEN expresion ELSE expresion . FI
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    FI              shift and go to state 146
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 138

    (52) expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration . )
    )               shift and go to state 147


state 139

    (62) case -> OBJECTID : TYPEID DARROW . expresion ;
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 148

state 140

    (43) expresion -> LET OBJECTID : TYPEID ASSIGN expresion IN . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 149

state 141

    (46) expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id . IN expresion
    (54) lista_id -> lista_id . , OBJECTID : error
    (55) lista_id -> lista_id . , OBJECTID : error ASSIGN expresion
    (58) lista_id -> lista_id . , OBJECTID : TYPEID
    (59) lista_id -> lista_id . , OBJECTID : TYPEID ASSIGN expresion
    IN              shift and go to state 150
    ,               shift and go to state 135


state 142

    (45) expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id . IN expresion
    (54) lista_id -> lista_id . , OBJECTID : error
    (55) lista_id -> lista_id . , OBJECTID : error ASSIGN expresion
    (58) lista_id -> lista_id . , OBJECTID : TYPEID
    (59) lista_id -> lista_id . , OBJECTID : TYPEID ASSIGN expresion
    IN              shift and go to state 151
    ,               shift and go to state 135


state 143

    (44) expresion -> LET OBJECTID : TYPEID lista_id IN expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    ;               reduce using rule 44 (expresion -> LET OBJECTID : TYPEID lista_id IN expresion .)
    )               reduce using rule 44 (expresion -> LET OBJECTID : TYPEID lista_id IN expresion .)
    OF              reduce using rule 44 (expresion -> LET OBJECTID : TYPEID lista_id IN expresion .)
    LOOP            reduce using rule 44 (expresion -> LET OBJECTID : TYPEID lista_id IN expresion .)
    THEN            reduce using rule 44 (expresion -> LET OBJECTID : TYPEID lista_id IN expresion .)
    ,               reduce using rule 44 (expresion -> LET OBJECTID : TYPEID lista_id IN expresion .)
    }               reduce using rule 44 (expresion -> LET OBJECTID : TYPEID lista_id IN expresion .)
    POOL            reduce using rule 44 (expresion -> LET OBJECTID : TYPEID lista_id IN expresion .)
    ELSE            reduce using rule 44 (expresion -> LET OBJECTID : TYPEID lista_id IN expresion .)
    IN              reduce using rule 44 (expresion -> LET OBJECTID : TYPEID lista_id IN expresion .)
    FI              reduce using rule 44 (expresion -> LET OBJECTID : TYPEID lista_id IN expresion .)
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 144

    (54) lista_id -> lista_id , OBJECTID . : error
    (55) lista_id -> lista_id , OBJECTID . : error ASSIGN expresion
    (58) lista_id -> lista_id , OBJECTID . : TYPEID
    (59) lista_id -> lista_id , OBJECTID . : TYPEID ASSIGN expresion
    :               shift and go to state 152


state 145

    (56) lista_id -> , OBJECTID : . error
    (57) lista_id -> , OBJECTID : . error ASSIGN expresion
    (60) lista_id -> , OBJECTID : . TYPEID
    (61) lista_id -> , OBJECTID : . TYPEID ASSIGN expresion
    error           shift and go to state 153
    TYPEID          shift and go to state 154


state 146

    (49) expresion -> IF expresion THEN expresion ELSE expresion FI .
    <               reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    LE              reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    =               reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    /               reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    *               reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    -               reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    +               reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    .               reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    @               reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    ;               reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    )               reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    OF              reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    LOOP            reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    THEN            reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    ,               reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    }               reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    POOL            reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    ELSE            reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    IN              reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)
    FI              reduce using rule 49 (expresion -> IF expresion THEN expresion ELSE expresion FI .)


state 147

    (52) expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .
    <               reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    LE              reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    =               reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    /               reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    *               reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    -               reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    +               reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    .               reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    @               reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    ;               reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    )               reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    OF              reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    LOOP            reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    THEN            reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    ,               reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    }               reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    POOL            reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    ELSE            reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    IN              reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)
    FI              reduce using rule 52 (expresion -> expresion @ TYPEID . OBJECTID ( expr_enumeration ) .)


state 148

    (62) case -> OBJECTID : TYPEID DARROW expresion . ;
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    ;               shift and go to state 155
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 149

    (43) expresion -> LET OBJECTID : TYPEID ASSIGN expresion IN expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    ;               reduce using rule 43 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion IN expresion .)
    )               reduce using rule 43 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion IN expresion .)
    OF              reduce using rule 43 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion IN expresion .)
    LOOP            reduce using rule 43 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion IN expresion .)
    THEN            reduce using rule 43 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion IN expresion .)
    ,               reduce using rule 43 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion IN expresion .)
    }               reduce using rule 43 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion IN expresion .)
    POOL            reduce using rule 43 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion IN expresion .)
    ELSE            reduce using rule 43 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion IN expresion .)
    IN              reduce using rule 43 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion IN expresion .)
    FI              reduce using rule 43 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion IN expresion .)
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 150

    (46) expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id IN . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 156

state 151

    (45) expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id IN . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 157

state 152

    (54) lista_id -> lista_id , OBJECTID : . error
    (55) lista_id -> lista_id , OBJECTID : . error ASSIGN expresion
    (58) lista_id -> lista_id , OBJECTID : . TYPEID
    (59) lista_id -> lista_id , OBJECTID : . TYPEID ASSIGN expresion
    error           shift and go to state 158
    TYPEID          shift and go to state 159


state 153

    (56) lista_id -> , OBJECTID : error .
    (57) lista_id -> , OBJECTID : error . ASSIGN expresion
    IN              reduce using rule 56 (lista_id -> , OBJECTID : error .)
    ,               reduce using rule 56 (lista_id -> , OBJECTID : error .)
    ASSIGN          shift and go to state 160


state 154

    (60) lista_id -> , OBJECTID : TYPEID .
    (61) lista_id -> , OBJECTID : TYPEID . ASSIGN expresion
    IN              reduce using rule 60 (lista_id -> , OBJECTID : TYPEID .)
    ,               reduce using rule 60 (lista_id -> , OBJECTID : TYPEID .)
    ASSIGN          shift and go to state 161


state 155

    (62) case -> OBJECTID : TYPEID DARROW expresion ; .
    ESAC            reduce using rule 62 (case -> OBJECTID : TYPEID DARROW expresion ; .)
    OBJECTID        reduce using rule 62 (case -> OBJECTID : TYPEID DARROW expresion ; .)


state 156

    (46) expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    ;               reduce using rule 46 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion .)
    )               reduce using rule 46 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion .)
    OF              reduce using rule 46 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion .)
    LOOP            reduce using rule 46 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion .)
    THEN            reduce using rule 46 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion .)
    ,               reduce using rule 46 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion .)
    }               reduce using rule 46 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion .)
    POOL            reduce using rule 46 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion .)
    ELSE            reduce using rule 46 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion .)
    IN              reduce using rule 46 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion .)
    FI              reduce using rule 46 (expresion -> LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion .)
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 157

    (45) expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    ;               reduce using rule 45 (expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion .)
    )               reduce using rule 45 (expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion .)
    OF              reduce using rule 45 (expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion .)
    LOOP            reduce using rule 45 (expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion .)
    THEN            reduce using rule 45 (expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion .)
    ,               reduce using rule 45 (expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion .)
    }               reduce using rule 45 (expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion .)
    POOL            reduce using rule 45 (expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion .)
    ELSE            reduce using rule 45 (expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion .)
    IN              reduce using rule 45 (expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion .)
    FI              reduce using rule 45 (expresion -> LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion .)
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 158

    (54) lista_id -> lista_id , OBJECTID : error .
    (55) lista_id -> lista_id , OBJECTID : error . ASSIGN expresion
    IN              reduce using rule 54 (lista_id -> lista_id , OBJECTID : error .)
    ,               reduce using rule 54 (lista_id -> lista_id , OBJECTID : error .)
    ASSIGN          shift and go to state 162


state 159

    (58) lista_id -> lista_id , OBJECTID : TYPEID .
    (59) lista_id -> lista_id , OBJECTID : TYPEID . ASSIGN expresion
    IN              reduce using rule 58 (lista_id -> lista_id , OBJECTID : TYPEID .)
    ,               reduce using rule 58 (lista_id -> lista_id , OBJECTID : TYPEID .)
    ASSIGN          shift and go to state 163


state 160

    (57) lista_id -> , OBJECTID : error ASSIGN . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 164

state 161

    (61) lista_id -> , OBJECTID : TYPEID ASSIGN . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 165

state 162

    (55) lista_id -> lista_id , OBJECTID : error ASSIGN . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 166

state 163

    (59) lista_id -> lista_id , OBJECTID : TYPEID ASSIGN . expresion
    (24) expresion -> . { error ; lista_expresiones }
    (25) expresion -> . expresion < expresion
    (26) expresion -> . expresion LE expresion
    (27) expresion -> . BOOL_CONST
    (28) expresion -> . STR_CONST
    (29) expresion -> . INT_CONST
    (30) expresion -> . OBJECTID
    (31) expresion -> . ( expresion )
    (32) expresion -> . NOT expresion
    (33) expresion -> . expresion = expresion
    (34) expresion -> . ~ expresion
    (35) expresion -> . expresion / expresion
    (36) expresion -> . expresion * expresion
    (37) expresion -> . expresion - expresion
    (38) expresion -> . expresion + expresion
    (39) expresion -> . ISVOID expresion
    (40) expresion -> . NEW TYPEID
    (41) expresion -> . CASE expresion OF lista_cases ESAC
    (42) expresion -> . LET OBJECTID : TYPEID IN expresion
    (43) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion IN expresion
    (44) expresion -> . LET OBJECTID : TYPEID lista_id IN expresion
    (45) expresion -> . LET OBJECTID : TYPEID ASSIGN error lista_id IN expresion
    (46) expresion -> . LET OBJECTID : TYPEID ASSIGN expresion lista_id IN expresion
    (47) expresion -> . { lista_expresiones }
    (48) expresion -> . WHILE expresion LOOP expresion POOL
    (49) expresion -> . IF expresion THEN expresion ELSE expresion FI
    (50) expresion -> . OBJECTID ( expr_enumeration )
    (51) expresion -> . expresion . OBJECTID ( expr_enumeration )
    (52) expresion -> . expresion @ TYPEID . OBJECTID ( expr_enumeration )
    (53) expresion -> . OBJECTID ASSIGN expresion
    {               shift and go to state 40
    BOOL_CONST      shift and go to state 41
    STR_CONST       shift and go to state 42
    INT_CONST       shift and go to state 43
    OBJECTID        shift and go to state 38
    (               shift and go to state 44
    NOT             shift and go to state 45
    ~               shift and go to state 46
    ISVOID          shift and go to state 47
    NEW             shift and go to state 48
    CASE            shift and go to state 49
    LET             shift and go to state 50
    WHILE           shift and go to state 51
    IF              shift and go to state 52

    expresion                      shift and go to state 167

state 164

    (57) lista_id -> , OBJECTID : error ASSIGN expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    IN              reduce using rule 57 (lista_id -> , OBJECTID : error ASSIGN expresion .)
    ,               reduce using rule 57 (lista_id -> , OBJECTID : error ASSIGN expresion .)
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 165

    (61) lista_id -> , OBJECTID : TYPEID ASSIGN expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    IN              reduce using rule 61 (lista_id -> , OBJECTID : TYPEID ASSIGN expresion .)
    ,               reduce using rule 61 (lista_id -> , OBJECTID : TYPEID ASSIGN expresion .)
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 166

    (55) lista_id -> lista_id , OBJECTID : error ASSIGN expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    IN              reduce using rule 55 (lista_id -> lista_id , OBJECTID : error ASSIGN expresion .)
    ,               reduce using rule 55 (lista_id -> lista_id , OBJECTID : error ASSIGN expresion .)
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64


state 167

    (59) lista_id -> lista_id , OBJECTID : TYPEID ASSIGN expresion .
    (25) expresion -> expresion . < expresion
    (26) expresion -> expresion . LE expresion
    (33) expresion -> expresion . = expresion
    (35) expresion -> expresion . / expresion
    (36) expresion -> expresion . * expresion
    (37) expresion -> expresion . - expresion
    (38) expresion -> expresion . + expresion
    (51) expresion -> expresion . . OBJECTID ( expr_enumeration )
    (52) expresion -> expresion . @ TYPEID . OBJECTID ( expr_enumeration )
    IN              reduce using rule 59 (lista_id -> lista_id , OBJECTID : TYPEID ASSIGN expresion .)
    ,               reduce using rule 59 (lista_id -> lista_id , OBJECTID : TYPEID ASSIGN expresion .)
    <               shift and go to state 56
    LE              shift and go to state 57
    =               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    .               shift and go to state 63
    @               shift and go to state 64
